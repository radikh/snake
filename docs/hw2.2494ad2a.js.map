{"mappings":"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","sources":["<anon>","src/script.ts"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire46ba\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire46ba\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $6qqMG = parcelRequire(\"6qqMG\");\nconst $0f592d681121713f$var$canvas = document.getElementById('gameCanvas');\nconst $0f592d681121713f$var$ctx = $0f592d681121713f$var$canvas.getContext('2d');\nconst $0f592d681121713f$var$gridSize = 20;\nconst $0f592d681121713f$var$tileCount = 20;\n// Current language\nlet $0f592d681121713f$var$currentLang = (0, $6qqMG.getDefaultLanguage)();\nlet $0f592d681121713f$var$translations = (0, $6qqMG.languages)[$0f592d681121713f$var$currentLang];\n// Initialize localization\nfunction $0f592d681121713f$var$initializeLanguage() {\n    // Set active class on the current language button\n    document.querySelectorAll('.language-btn').forEach((btn)=>{\n        const langBtn = btn;\n        if (langBtn.dataset.lang === $0f592d681121713f$var$currentLang) langBtn.classList.add('active');\n        else langBtn.classList.remove('active');\n    });\n    // Update page title\n    document.title = $0f592d681121713f$var$translations.title;\n    // Update all i18n elements\n    document.querySelectorAll('[data-i18n]').forEach((el)=>{\n        const key = el.getAttribute('data-i18n');\n        if ($0f592d681121713f$var$translations[key]) el.textContent = $0f592d681121713f$var$translations[key];\n    });\n}\n// Handle language switching\nfunction $0f592d681121713f$var$setupLanguageSwitcher() {\n    document.querySelectorAll('.language-btn').forEach((btn)=>{\n        btn.addEventListener('click', (e)=>{\n            const target = e.target;\n            const lang = target.dataset.lang;\n            if (lang && lang !== $0f592d681121713f$var$currentLang) {\n                $0f592d681121713f$var$currentLang = lang;\n                $0f592d681121713f$var$translations = (0, $6qqMG.languages)[$0f592d681121713f$var$currentLang];\n                (0, $6qqMG.setLanguagePreference)($0f592d681121713f$var$currentLang);\n                $0f592d681121713f$var$initializeLanguage();\n                // Update dynamic content, like high scores\n                if ($0f592d681121713f$var$game) $0f592d681121713f$var$game.updateHighScoresDisplay();\n            }\n        });\n    });\n}\nvar $0f592d681121713f$var$Direction = /*#__PURE__*/ function(Direction) {\n    Direction[Direction[\"Up\"] = 0] = \"Up\";\n    Direction[Direction[\"Down\"] = 1] = \"Down\";\n    Direction[Direction[\"Left\"] = 2] = \"Left\";\n    Direction[Direction[\"Right\"] = 3] = \"Right\";\n    return Direction;\n}($0f592d681121713f$var$Direction || {});\nclass $0f592d681121713f$var$Snake {\n    constructor(){\n        // Initialize with 4 segments in a row, pointing right\n        this.body = [\n            {\n                x: 10,\n                y: 10\n            },\n            {\n                x: 9,\n                y: 10\n            },\n            {\n                x: 8,\n                y: 10\n            },\n            {\n                x: 7,\n                y: 10\n            } // Fourth segment\n        ];\n        this.direction = 3;\n    }\n    move() {\n        const head = {\n            ...this.body[0]\n        };\n        switch(this.direction){\n            case 0:\n                head.y--;\n                if (head.y < 0) head.y = $0f592d681121713f$var$tileCount - 1;\n                break;\n            case 1:\n                head.y++;\n                if (head.y >= $0f592d681121713f$var$tileCount) head.y = 0;\n                break;\n            case 2:\n                head.x--;\n                if (head.x < 0) head.x = $0f592d681121713f$var$tileCount - 1;\n                break;\n            case 3:\n                head.x++;\n                if (head.x >= $0f592d681121713f$var$tileCount) head.x = 0;\n                break;\n        }\n        this.body.unshift(head);\n        return false;\n    }\n    grow() {\n    // No change needed here\n    }\n    checkCollision() {\n        const head = this.body[0];\n        // Remove boundary collision check since snake now loops\n        // Only check for collision with self\n        for(let i = 1; i < this.body.length; i++){\n            if (head.x === this.body[i].x && head.y === this.body[i].y) return true;\n        }\n        return false;\n    }\n    draw() {\n        if (!$0f592d681121713f$var$ctx) return;\n        this.body.forEach((segment, index)=>{\n            if (index === 0) $0f592d681121713f$var$ctx.fillStyle = \"#228B22\";\n            else $0f592d681121713f$var$ctx.fillStyle = \"#32CD32\";\n            $0f592d681121713f$var$ctx.fillRect(segment.x * $0f592d681121713f$var$gridSize, segment.y * $0f592d681121713f$var$gridSize, $0f592d681121713f$var$gridSize - 2, $0f592d681121713f$var$gridSize - 2);\n        });\n    }\n}\nclass $0f592d681121713f$var$Food {\n    constructor(){\n        this.x = 0;\n        this.y = 0;\n        this.randomize();\n    }\n    randomize() {\n        this.x = Math.floor(Math.random() * $0f592d681121713f$var$tileCount);\n        this.y = Math.floor(Math.random() * $0f592d681121713f$var$tileCount);\n    }\n    draw() {\n        if (!$0f592d681121713f$var$ctx) return;\n        $0f592d681121713f$var$ctx.fillStyle = \"#FF0000\";\n        $0f592d681121713f$var$ctx.fillRect(this.x * $0f592d681121713f$var$gridSize, this.y * $0f592d681121713f$var$gridSize, $0f592d681121713f$var$gridSize - 2, $0f592d681121713f$var$gridSize - 2);\n    }\n}\n// Add Big Food class for special bonus food\nclass $0f592d681121713f$var$BigFood extends $0f592d681121713f$var$Food {\n    constructor(){\n        super();\n        this.isActive = false;\n        this.timer = 0;\n        this.points = 0;\n        this.size = 2; // Size multiplier (2x2 grid)\n    }\n    activate() {\n        this.isActive = true;\n        this.randomize();\n        this.points = 3 + Math.floor(Math.random() * 4); // 3 to 6 points\n        this.timer = 12000; // 12 seconds in milliseconds\n    }\n    deactivate() {\n        this.isActive = false;\n        this.timer = 0;\n    }\n    update(deltaTime) {\n        if (!this.isActive) return;\n        this.timer -= deltaTime;\n        if (this.timer <= 0) this.deactivate();\n    }\n    randomize() {\n        // Ensure big food doesn't exceed grid boundaries\n        this.x = Math.floor(Math.random() * ($0f592d681121713f$var$tileCount - this.size + 1));\n        this.y = Math.floor(Math.random() * ($0f592d681121713f$var$tileCount - this.size + 1));\n    }\n    draw() {\n        if (!$0f592d681121713f$var$ctx || !this.isActive) return;\n        // Draw a bigger apple with a different shade of red\n        $0f592d681121713f$var$ctx.fillStyle = \"#FF3333\";\n        $0f592d681121713f$var$ctx.fillRect(this.x * $0f592d681121713f$var$gridSize, this.y * $0f592d681121713f$var$gridSize, this.size * $0f592d681121713f$var$gridSize - 2, this.size * $0f592d681121713f$var$gridSize - 2);\n        // Add a highlight effect\n        $0f592d681121713f$var$ctx.fillStyle = \"#FF6666\";\n        $0f592d681121713f$var$ctx.fillRect(this.x * $0f592d681121713f$var$gridSize + 5, this.y * $0f592d681121713f$var$gridSize + 5, 10, 10);\n        // Display the number of points\n        $0f592d681121713f$var$ctx.fillStyle = \"#FFFFFF\";\n        $0f592d681121713f$var$ctx.font = \"16px Arial\";\n        $0f592d681121713f$var$ctx.textAlign = \"center\";\n        $0f592d681121713f$var$ctx.fillText(`${this.points}`, this.x * $0f592d681121713f$var$gridSize + this.size * $0f592d681121713f$var$gridSize / 2, this.y * $0f592d681121713f$var$gridSize + this.size * $0f592d681121713f$var$gridSize / 2 + 5);\n    }\n    checkCollision(x, y) {\n        if (!this.isActive) return false;\n        // Check if head is anywhere within the big food area\n        return x >= this.x && x < this.x + this.size && y >= this.y && y < this.y + this.size;\n    }\n}\nclass $0f592d681121713f$var$Game {\n    constructor(){\n        this.snake = new $0f592d681121713f$var$Snake();\n        this.food = new $0f592d681121713f$var$Food();\n        this.bigFood = new $0f592d681121713f$var$BigFood();\n        this.score = 0;\n        this.gameOver = false;\n        this.normalSpeed = 200; // Normal speed (milliseconds between updates)\n        this.fastSpeed = 120; // Fast speed when long pressing\n        this.speed = this.normalSpeed;\n        this.longPressTimer = null;\n        this.minSpeed = 50; // Minimum speed limit to prevent game from becoming too fast\n        this.highScores = this.loadHighScores();\n        this.isNewHighScore = false;\n        this.playerName = 'Player 1';\n        this.isEnteringName = false;\n        this.foodEatenCount = 0; // Track number of regular food eaten\n        this.lastUpdateTime = Date.now();\n        this.setupEventListeners();\n        this.updateHighScoresDisplay();\n    }\n    setupEventListeners() {\n        document.addEventListener('keydown', (e)=>{\n            const { direction: direction } = this.snake;\n            let newDirection = null;\n            switch(e.key){\n                case 'ArrowUp':\n                    if (direction !== 1) newDirection = 0;\n                    break;\n                case 'ArrowDown':\n                    if (direction !== 0) newDirection = 1;\n                    break;\n                case 'ArrowLeft':\n                    if (direction !== 3) newDirection = 2;\n                    break;\n                case 'ArrowRight':\n                    if (direction !== 2) newDirection = 3;\n                    break;\n            }\n            // If direction changed and no timer is running, start the long press timer\n            if (newDirection !== null && this.longPressTimer === null) {\n                this.snake.direction = newDirection;\n                this.longPressTimer = window.setTimeout(()=>{\n                    this.speed = this.fastSpeed; // Speed up after long press\n                }, 200); // 300ms threshold for \"long press\"\n            }\n        });\n        document.addEventListener('keyup', (e)=>{\n            if ([\n                'ArrowUp',\n                'ArrowDown',\n                'ArrowLeft',\n                'ArrowRight'\n            ].includes(e.key)) {\n                // Clear the timer if it exists\n                if (this.longPressTimer !== null) {\n                    clearTimeout(this.longPressTimer);\n                    this.longPressTimer = null;\n                }\n                // Reset speed to normal\n                this.speed = this.normalSpeed;\n            }\n        });\n        // Add key listener for name entry\n        document.addEventListener('keydown', (e)=>{\n            if (this.isEnteringName) {\n                if (e.key === 'Enter') this.saveHighScore();\n                else if (e.key === 'Backspace') this.playerName = this.playerName.slice(0, -1);\n                else if (e.key.length === 1 && this.playerName.length < 10) this.playerName += e.key;\n                e.preventDefault();\n            }\n        });\n    }\n    update() {\n        if (this.gameOver) return;\n        // Calculate delta time for time-based updates\n        const currentTime = Date.now();\n        const deltaTime = currentTime - this.lastUpdateTime;\n        this.lastUpdateTime = currentTime;\n        // Update big food timer if active\n        this.bigFood.update(deltaTime);\n        this.snake.move();\n        const head = this.snake.body[0];\n        // Check for collision with regular food\n        if (head.x === this.food.x && head.y === this.food.y) {\n            this.score++;\n            this.foodEatenCount++;\n            // Every 6 regular food eaten, activate big food\n            if (this.foodEatenCount >= 6) {\n                this.foodEatenCount = 0;\n                this.bigFood.activate();\n            }\n            // Speed up the game every fruit\n            if (this.score % 1 === 0) {\n                // Decrease both speeds by 10ms (making the game faster)\n                this.normalSpeed = Math.max(this.normalSpeed - 10, this.minSpeed);\n                this.fastSpeed = Math.max(this.fastSpeed - 10, this.minSpeed / 2);\n                // Apply the speed change immediately\n                if (this.speed === this.fastSpeed + 10) this.speed = this.fastSpeed;\n                else this.speed = this.normalSpeed;\n            }\n            this.food.randomize();\n            this.snake.grow();\n        } else if (this.bigFood.isActive && this.bigFood.checkCollision(head.x, head.y)) {\n            // Add big food's points to score\n            this.score += this.bigFood.points;\n            // Deactivate the big food\n            this.bigFood.deactivate();\n            // Grow the snake\n            for(let i = 0; i < this.bigFood.points; i++)this.snake.grow();\n        } else this.snake.body.pop();\n        if (this.snake.checkCollision()) {\n            this.gameOver = true;\n            this.checkHighScore();\n        }\n    }\n    loadHighScores() {\n        const highScoresJson = localStorage.getItem('snakeHighScores');\n        if (highScoresJson) return JSON.parse(highScoresJson);\n        else return [];\n    }\n    saveHighScores() {\n        localStorage.setItem('snakeHighScores', JSON.stringify(this.highScores));\n    }\n    checkHighScore() {\n        if (this.score === 0) return;\n        // If we have fewer than 5 scores, or the current score is higher than the lowest high score\n        if (this.highScores.length < 5 || this.score > this.highScores[this.highScores.length - 1].score) {\n            this.isNewHighScore = true;\n            this.isEnteringName = true;\n        }\n    }\n    saveHighScore() {\n        const newScore = {\n            name: this.playerName || 'Anonymous',\n            score: this.score,\n            date: new Date().toLocaleDateString()\n        };\n        this.highScores.push(newScore);\n        // Sort high scores (highest first)\n        this.highScores.sort((a, b)=>b.score - a.score);\n        // Keep only the top 5\n        this.highScores = this.highScores.slice(0, 5);\n        // Save to localStorage\n        this.saveHighScores();\n        this.isEnteringName = false;\n        // Update the sidebar display\n        this.updateHighScoresDisplay();\n    }\n    updateHighScoresDisplay() {\n        const highScoresList = document.getElementById('high-scores-list');\n        if (!highScoresList) return;\n        // Clear existing content\n        highScoresList.innerHTML = '';\n        if (this.highScores.length === 0) {\n            const noScores = document.createElement('div');\n            noScores.className = 'no-scores';\n            noScores.textContent = $0f592d681121713f$var$translations.noScoresYet;\n            highScoresList.appendChild(noScores);\n        } else {\n            // Add each high score, limited to 5\n            const displayScores = this.highScores.slice(0, 5);\n            displayScores.forEach((score, index)=>{\n                const entry = document.createElement('div');\n                entry.className = 'score-entry';\n                const rankAndName = document.createElement('div');\n                rankAndName.innerHTML = `${index + 1}. <span class=\"name\">${score.name}</span>`;\n                const scoreElement = document.createElement('span');\n                scoreElement.className = 'score';\n                scoreElement.textContent = `${score.score}`;\n                const dateElement = document.createElement('div');\n                dateElement.className = 'date';\n                dateElement.textContent = score.date;\n                entry.appendChild(rankAndName);\n                entry.appendChild(scoreElement);\n                entry.appendChild(dateElement);\n                highScoresList.appendChild(entry);\n            });\n        }\n    }\n    drawHighScores() {\n        if (!$0f592d681121713f$var$ctx) return;\n        $0f592d681121713f$var$ctx.fillStyle = \"#ffffff\";\n        $0f592d681121713f$var$ctx.font = \"24px Arial\";\n        $0f592d681121713f$var$ctx.textAlign = \"center\";\n        const centerX = $0f592d681121713f$var$canvas.width / 2;\n        let centerY = $0f592d681121713f$var$canvas.height / 2 - 60;\n        $0f592d681121713f$var$ctx.fillText(\"HIGH SCORES\", centerX, centerY);\n        centerY += 30;\n        $0f592d681121713f$var$ctx.font = \"16px Arial\";\n        if (this.highScores.length === 0) $0f592d681121713f$var$ctx.fillText(\"No high scores yet!\", centerX, centerY + 20);\n        else this.highScores.forEach((highScore, index)=>{\n            $0f592d681121713f$var$ctx.fillText(`${index + 1}. ${highScore.name}: ${highScore.score} (${highScore.date})`, centerX, centerY + index * 25);\n        });\n    }\n    draw() {\n        if (!$0f592d681121713f$var$ctx) return;\n        $0f592d681121713f$var$ctx.fillStyle = \"#000000\";\n        $0f592d681121713f$var$ctx.fillRect(0, 0, $0f592d681121713f$var$canvas.width, $0f592d681121713f$var$canvas.height);\n        // During gameplay\n        if (!this.gameOver) {\n            this.snake.draw();\n            this.food.draw();\n            // Draw big food if active\n            this.bigFood.draw();\n            $0f592d681121713f$var$ctx.fillStyle = \"#ffffff\";\n            $0f592d681121713f$var$ctx.font = \"20px Arial\";\n            $0f592d681121713f$var$ctx.textAlign = \"left\";\n            $0f592d681121713f$var$ctx.fillText(`${$0f592d681121713f$var$translations.score}: ${this.score}`, 10, 30);\n            // If big food is active, show its timer\n            if (this.bigFood.isActive) {\n                const secondsLeft = Math.ceil(this.bigFood.timer / 1000);\n                $0f592d681121713f$var$ctx.fillStyle = \"#FF6666\";\n                $0f592d681121713f$var$ctx.textAlign = \"right\";\n                $0f592d681121713f$var$ctx.fillText(`${$0f592d681121713f$var$translations.bigAppleTimer}: ${secondsLeft}s`, $0f592d681121713f$var$canvas.width - 10, 30);\n            }\n        } else {\n            $0f592d681121713f$var$ctx.fillStyle = \"#ffffff\";\n            $0f592d681121713f$var$ctx.font = \"30px Arial\";\n            $0f592d681121713f$var$ctx.textAlign = \"center\";\n            const centerX = $0f592d681121713f$var$canvas.width / 2;\n            const centerY = $0f592d681121713f$var$canvas.height / 5;\n            $0f592d681121713f$var$ctx.fillText($0f592d681121713f$var$translations.gameOver, centerX, centerY);\n            $0f592d681121713f$var$ctx.font = \"20px Arial\";\n            $0f592d681121713f$var$ctx.fillText(`${$0f592d681121713f$var$translations.finalScore}: ${this.score}`, centerX, centerY + 20);\n            // If it's a new high score and player is entering name\n            if (this.isEnteringName) {\n                $0f592d681121713f$var$ctx.fillText($0f592d681121713f$var$translations.newHighScore, centerX, centerY + 100);\n                $0f592d681121713f$var$ctx.fillText(this.playerName + \"_\", centerX, centerY + 140);\n            } else {\n                // Show high scores with even more spacing\n                $0f592d681121713f$var$ctx.font = \"24px Arial\";\n                const highScoresY = centerY + 80;\n                $0f592d681121713f$var$ctx.fillText($0f592d681121713f$var$translations.highScores, centerX, highScoresY);\n                $0f592d681121713f$var$ctx.font = \"16px Arial\";\n                if (this.highScores.length === 0) $0f592d681121713f$var$ctx.fillText($0f592d681121713f$var$translations.noHighScores, centerX, highScoresY + 40);\n                else {\n                    // Only display up to 5 high scores\n                    const displayScores = this.highScores.slice(0, 5);\n                    displayScores.forEach((highScore, index)=>{\n                        $0f592d681121713f$var$ctx.fillText(`${index + 1}. ${highScore.name}: ${highScore.score} (${highScore.date})`, centerX, highScoresY + 40 + index * 35);\n                    });\n                }\n                // Restart prompt at bottom with fixed position\n                $0f592d681121713f$var$ctx.fillStyle = \"#90EE90\";\n                $0f592d681121713f$var$ctx.font = \"18px Arial\";\n                $0f592d681121713f$var$ctx.fillText($0f592d681121713f$var$translations.pressSpace, centerX, $0f592d681121713f$var$canvas.height - 20);\n            }\n        }\n    }\n}\nlet $0f592d681121713f$var$game = new $0f592d681121713f$var$Game();\ndocument.addEventListener('keydown', (e)=>{\n    if (e.code === 'Space' && $0f592d681121713f$var$game.gameOver) $0f592d681121713f$var$game = new $0f592d681121713f$var$Game();\n});\nfunction $0f592d681121713f$var$gameLoop() {\n    $0f592d681121713f$var$game.update();\n    $0f592d681121713f$var$game.draw();\n    setTimeout($0f592d681121713f$var$gameLoop, $0f592d681121713f$var$game.speed); // Use the current game speed\n}\nwindow.onload = ()=>{\n    $0f592d681121713f$var$initializeLanguage();\n    $0f592d681121713f$var$setupLanguageSwitcher();\n    $0f592d681121713f$var$gameLoop();\n    // Check for existing high scores to show on initial load\n    $0f592d681121713f$var$game.updateHighScoresDisplay();\n};\n\n\n//# sourceMappingURL=hw2.2494ad2a.js.map\n","import { languages, getDefaultLanguage, setLanguagePreference, LanguageKey } from './localization';\n\nconst canvas = document.getElementById('gameCanvas') as HTMLCanvasElement;\nconst ctx = canvas.getContext('2d');\nconst gridSize = 20;\nconst tileCount = 20;\n\n// Current language\nlet currentLang = getDefaultLanguage();\nlet translations = languages[currentLang];\n\n// Initialize localization\nfunction initializeLanguage() {\n  // Set active class on the current language button\n  document.querySelectorAll('.language-btn').forEach(btn => {\n    const langBtn = btn as HTMLButtonElement;\n    if (langBtn.dataset.lang === currentLang) {\n      langBtn.classList.add('active');\n    } else {\n      langBtn.classList.remove('active');\n    }\n  });\n  \n  // Update page title\n  document.title = translations.title;\n  \n  // Update all i18n elements\n  document.querySelectorAll('[data-i18n]').forEach(el => {\n    const key = el.getAttribute('data-i18n') as keyof typeof translations;\n    if (translations[key]) {\n      el.textContent = translations[key];\n    }\n  });\n}\n\n// Handle language switching\nfunction setupLanguageSwitcher() {\n  document.querySelectorAll('.language-btn').forEach(btn => {\n    btn.addEventListener('click', (e) => {\n      const target = e.target as HTMLButtonElement;\n      const lang = target.dataset.lang as LanguageKey;\n      \n      if (lang && lang !== currentLang) {\n        currentLang = lang;\n        translations = languages[currentLang];\n        setLanguagePreference(currentLang);\n        initializeLanguage();\n        \n        // Update dynamic content, like high scores\n        if (game) {\n          game.updateHighScoresDisplay();\n        }\n      }\n    });\n  });\n}\n\nenum Direction {\n  Up,\n  Down,\n  Left,\n  Right\n}\n\nclass Snake {\n  body: { x: number, y: number }[];\n  direction: Direction;\n  \n  constructor() {\n    // Initialize with 4 segments in a row, pointing right\n    this.body = [\n      { x: 10, y: 10 }, // Head\n      { x: 9, y: 10 },  // Second segment\n      { x: 8, y: 10 },  // Third segment\n      { x: 7, y: 10 }   // Fourth segment\n    ];\n    this.direction = Direction.Right;\n  }\n  \n  move() {\n    const head = { ...this.body[0] };\n    \n    switch(this.direction) {\n      case Direction.Up:\n        head.y--;\n        if (head.y < 0) head.y = tileCount - 1;\n        break;\n      case Direction.Down:\n        head.y++;\n        if (head.y >= tileCount) head.y = 0;\n        break;\n      case Direction.Left:\n        head.x--;\n        if (head.x < 0) head.x = tileCount - 1;\n        break;\n      case Direction.Right:\n        head.x++;\n        if (head.x >= tileCount) head.x = 0;\n        break;\n    }\n    \n    this.body.unshift(head);\n    \n    return false;\n  }\n  \n  grow() {\n    // No change needed here\n  }\n  \n  checkCollision(): boolean {\n    const head = this.body[0];\n    \n    // Remove boundary collision check since snake now loops\n    // Only check for collision with self\n    for (let i = 1; i < this.body.length; i++) {\n      if (head.x === this.body[i].x && head.y === this.body[i].y) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n  \n  draw() {\n    if (!ctx) return;\n    \n\n    this.body.forEach((segment, index) => {\n    \n      if (index === 0) {\n        ctx.fillStyle = \"#228B22\";\n      } else {\n        ctx.fillStyle = \"#32CD32\";\n      }\n      \n      ctx.fillRect(\n        segment.x * gridSize,\n        segment.y * gridSize,\n        gridSize - 2,\n        gridSize - 2\n      );\n    });\n  }\n}\n\nclass Food {\n  x: number;\n  y: number;\n  \n  constructor() {\n    this.x = 0;\n    this.y = 0;\n    this.randomize();\n  }\n  \n  randomize() {\n    this.x = Math.floor(Math.random() * tileCount);\n    this.y = Math.floor(Math.random() * tileCount);\n  }\n  \n  draw() {\n    if (!ctx) return;\n    \n    ctx.fillStyle = \"#FF0000\";\n    ctx.fillRect(\n      this.x * gridSize,\n      this.y * gridSize,\n      gridSize - 2,\n      gridSize - 2\n    );\n  }\n}\n\n// Add Big Food class for special bonus food\nclass BigFood extends Food {\n  isActive: boolean;\n  timer: number;\n  points: number;\n  size: number;\n  \n  constructor() {\n    super();\n    this.isActive = false;\n    this.timer = 0;\n    this.points = 0;\n    this.size = 2; // Size multiplier (2x2 grid)\n  }\n  \n  activate() {\n    this.isActive = true;\n    this.randomize();\n    this.points = 3 + Math.floor(Math.random() * 4); // 3 to 6 points\n    this.timer = 12000; // 12 seconds in milliseconds\n  }\n  \n  deactivate() {\n    this.isActive = false;\n    this.timer = 0;\n  }\n  \n  update(deltaTime: number) {\n    if (!this.isActive) return;\n    \n    this.timer -= deltaTime;\n    if (this.timer <= 0) {\n      this.deactivate();\n    }\n  }\n  \n  randomize() {\n    // Ensure big food doesn't exceed grid boundaries\n    this.x = Math.floor(Math.random() * (tileCount - this.size + 1));\n    this.y = Math.floor(Math.random() * (tileCount - this.size + 1));\n  }\n  \n  draw() {\n    if (!ctx || !this.isActive) return;\n    \n    // Draw a bigger apple with a different shade of red\n    ctx.fillStyle = \"#FF3333\";\n    ctx.fillRect(\n      this.x * gridSize,\n      this.y * gridSize,\n      this.size * gridSize - 2,\n      this.size * gridSize - 2\n    );\n    \n    // Add a highlight effect\n    ctx.fillStyle = \"#FF6666\";\n    ctx.fillRect(\n      this.x * gridSize + 5,\n      this.y * gridSize + 5,\n      10,\n      10\n    );\n    \n    // Display the number of points\n    ctx.fillStyle = \"#FFFFFF\";\n    ctx.font = \"16px Arial\";\n    ctx.textAlign = \"center\";\n    ctx.fillText(\n      `${this.points}`,\n      this.x * gridSize + (this.size * gridSize / 2),\n      this.y * gridSize + (this.size * gridSize / 2) + 5\n    );\n  }\n  \n  checkCollision(x: number, y: number): boolean {\n    if (!this.isActive) return false;\n    \n    // Check if head is anywhere within the big food area\n    return (x >= this.x && x < this.x + this.size &&\n            y >= this.y && y < this.y + this.size);\n  }\n}\n\n// Add an interface for high scores\ninterface HighScore {\n  name: string;\n  score: number;\n  date: string;\n}\n\nclass Game {\n  snake: Snake;\n  food: Food;\n  bigFood: BigFood;\n  score: number;\n  gameOver: boolean;\n  speed: number;\n  normalSpeed: number;\n  fastSpeed: number;\n  longPressTimer: number | null;\n  minSpeed: number;\n  highScores: HighScore[];\n  isNewHighScore: boolean;\n  playerName: string;\n  isEnteringName: boolean;\n  foodEatenCount: number;\n  lastUpdateTime: number;\n  \n  constructor() {\n    this.snake = new Snake();\n    this.food = new Food();\n    this.bigFood = new BigFood();\n    this.score = 0;\n    this.gameOver = false;\n    this.normalSpeed = 200; // Normal speed (milliseconds between updates)\n    this.fastSpeed = 120;   // Fast speed when long pressing\n    this.speed = this.normalSpeed;\n    this.longPressTimer = null;\n    this.minSpeed = 50;     // Minimum speed limit to prevent game from becoming too fast\n    this.highScores = this.loadHighScores();\n    this.isNewHighScore = false;\n    this.playerName = 'Player 1';\n    this.isEnteringName = false;\n    this.foodEatenCount = 0; // Track number of regular food eaten\n    this.lastUpdateTime = Date.now();\n    this.setupEventListeners();\n    this.updateHighScoresDisplay();\n  }\n  \n  setupEventListeners() {\n    document.addEventListener('keydown', (e) => {\n      const { direction } = this.snake;\n      let newDirection: Direction | null = null;\n      \n      switch(e.key) {\n        case 'ArrowUp':\n          if (direction !== Direction.Down) {\n            newDirection = Direction.Up;\n          }\n          break;\n        case 'ArrowDown':\n          if (direction !== Direction.Up) {\n            newDirection = Direction.Down;\n          }\n          break;\n        case 'ArrowLeft':\n          if (direction !== Direction.Right) {\n            newDirection = Direction.Left;\n          }\n          break;\n        case 'ArrowRight':\n          if (direction !== Direction.Left) {\n            newDirection = Direction.Right;\n          }\n          break;\n      }\n      \n      // If direction changed and no timer is running, start the long press timer\n      if (newDirection !== null && this.longPressTimer === null) {\n        this.snake.direction = newDirection;\n        \n        this.longPressTimer = window.setTimeout(() => {\n          this.speed = this.fastSpeed; // Speed up after long press\n        }, 200); // 300ms threshold for \"long press\"\n      }\n    });\n    \n    document.addEventListener('keyup', (e) => {\n      if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(e.key)) {\n        // Clear the timer if it exists\n        if (this.longPressTimer !== null) {\n          clearTimeout(this.longPressTimer);\n          this.longPressTimer = null;\n        }\n        // Reset speed to normal\n        this.speed = this.normalSpeed;\n      }\n    });\n\n    // Add key listener for name entry\n    document.addEventListener('keydown', (e) => {\n      if (this.isEnteringName) {\n        if (e.key === 'Enter') {\n          this.saveHighScore();\n        } else if (e.key === 'Backspace') {\n          this.playerName = this.playerName.slice(0, -1);\n        } else if (e.key.length === 1 && this.playerName.length < 10) {\n          this.playerName += e.key;\n        }\n        e.preventDefault();\n      }\n    });\n  }\n  \n  update() {\n    if (this.gameOver) return;\n    \n    // Calculate delta time for time-based updates\n    const currentTime = Date.now();\n    const deltaTime = currentTime - this.lastUpdateTime;\n    this.lastUpdateTime = currentTime;\n    \n    // Update big food timer if active\n    this.bigFood.update(deltaTime);\n    \n    this.snake.move();\n    \n    const head = this.snake.body[0];\n    \n    // Check for collision with regular food\n    if (head.x === this.food.x && head.y === this.food.y) {\n      this.score++;\n      this.foodEatenCount++;\n      \n      // Every 6 regular food eaten, activate big food\n      if (this.foodEatenCount >= 6) {\n        this.foodEatenCount = 0;\n        this.bigFood.activate();\n      }\n      \n      // Speed up the game every fruit\n      if (this.score % 1 === 0) {\n        // Decrease both speeds by 10ms (making the game faster)\n        this.normalSpeed = Math.max(this.normalSpeed - 10, this.minSpeed);\n        this.fastSpeed = Math.max(this.fastSpeed - 10, this.minSpeed / 2); \n        \n        // Apply the speed change immediately\n        if (this.speed === this.fastSpeed + 10) { // If was at fast speed\n          this.speed = this.fastSpeed;\n        } else { // If was at normal speed\n          this.speed = this.normalSpeed;\n        }\n      }\n      \n      this.food.randomize();\n      this.snake.grow();\n    } \n    // Check for collision with big food\n    else if (this.bigFood.isActive && this.bigFood.checkCollision(head.x, head.y)) {\n      // Add big food's points to score\n      this.score += this.bigFood.points;\n      \n      // Deactivate the big food\n      this.bigFood.deactivate();\n      \n      // Grow the snake\n      for (let i = 0; i < this.bigFood.points; i++) {\n        this.snake.grow();\n      }\n    }\n    else {\n      this.snake.body.pop();\n    }\n    \n    if (this.snake.checkCollision()) {\n      this.gameOver = true;\n      this.checkHighScore();\n    }\n  }\n\n  loadHighScores(): HighScore[] {\n    const highScoresJson = localStorage.getItem('snakeHighScores');\n    if (highScoresJson) {\n      return JSON.parse(highScoresJson);\n    } else {\n      return [];\n    }\n  }\n  \n  saveHighScores() {\n    localStorage.setItem('snakeHighScores', JSON.stringify(this.highScores));\n  }\n  \n  checkHighScore() {\n    if (this.score === 0) return;\n    \n    // If we have fewer than 5 scores, or the current score is higher than the lowest high score\n    if (this.highScores.length < 5 || this.score > this.highScores[this.highScores.length - 1].score) {\n      this.isNewHighScore = true;\n      this.isEnteringName = true;\n    }\n  }\n  \n  saveHighScore() {\n    const newScore: HighScore = {\n      name: this.playerName || 'Anonymous',\n      score: this.score,\n      date: new Date().toLocaleDateString()\n    };\n    \n    this.highScores.push(newScore);\n    // Sort high scores (highest first)\n    this.highScores.sort((a, b) => b.score - a.score);\n    // Keep only the top 5\n    this.highScores = this.highScores.slice(0, 5);\n    \n    // Save to localStorage\n    this.saveHighScores();\n    this.isEnteringName = false;\n    \n    // Update the sidebar display\n    this.updateHighScoresDisplay();\n  }\n  \n  updateHighScoresDisplay() {\n    const highScoresList = document.getElementById('high-scores-list');\n    if (!highScoresList) return;\n    \n    // Clear existing content\n    highScoresList.innerHTML = '';\n    \n    if (this.highScores.length === 0) {\n      const noScores = document.createElement('div');\n      noScores.className = 'no-scores';\n      noScores.textContent = translations.noScoresYet;\n      highScoresList.appendChild(noScores);\n    } else {\n      // Add each high score, limited to 5\n      const displayScores = this.highScores.slice(0, 5);\n      displayScores.forEach((score, index) => {\n        const entry = document.createElement('div');\n        entry.className = 'score-entry';\n        \n        const rankAndName = document.createElement('div');\n        rankAndName.innerHTML = `${index + 1}. <span class=\"name\">${score.name}</span>`;\n        \n        const scoreElement = document.createElement('span');\n        scoreElement.className = 'score';\n        scoreElement.textContent = `${score.score}`;\n        \n        const dateElement = document.createElement('div');\n        dateElement.className = 'date';\n        dateElement.textContent = score.date;\n        \n        entry.appendChild(rankAndName);\n        entry.appendChild(scoreElement);\n        entry.appendChild(dateElement);\n        \n        highScoresList.appendChild(entry);\n      });\n    }\n  }\n  \n  drawHighScores() {\n    if (!ctx) return;\n    \n    ctx.fillStyle = \"#ffffff\";\n    ctx.font = \"24px Arial\";\n    ctx.textAlign = \"center\";\n    const centerX = canvas.width / 2;\n    let centerY = canvas.height / 2 - 60;\n    \n    ctx.fillText(\"HIGH SCORES\", centerX, centerY);\n    centerY += 30;\n    \n    ctx.font = \"16px Arial\";\n    \n    if (this.highScores.length === 0) {\n      ctx.fillText(\"No high scores yet!\", centerX, centerY + 20);\n    } else {\n      this.highScores.forEach((highScore, index) => {\n        ctx.fillText(`${index + 1}. ${highScore.name}: ${highScore.score} (${highScore.date})`, centerX, centerY + index * 25);\n      });\n    }\n  }\n  \n  draw() {\n    if (!ctx) return;\n    \n    ctx.fillStyle = \"#000000\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    \n    // During gameplay\n    if (!this.gameOver) {\n      this.snake.draw();\n      this.food.draw();\n      \n      // Draw big food if active\n      this.bigFood.draw();\n      \n      ctx.fillStyle = \"#ffffff\";\n      ctx.font = \"20px Arial\";\n      ctx.textAlign = \"left\";\n      ctx.fillText(`${translations.score}: ${this.score}`, 10, 30);\n      \n      // If big food is active, show its timer\n      if (this.bigFood.isActive) {\n        const secondsLeft = Math.ceil(this.bigFood.timer / 1000);\n        ctx.fillStyle = \"#FF6666\";\n        ctx.textAlign = \"right\";\n        ctx.fillText(`${translations.bigAppleTimer}: ${secondsLeft}s`, canvas.width - 10, 30);\n      }\n    } \n    // Game over screen\n    else {\n      ctx.fillStyle = \"#ffffff\";\n      ctx.font = \"30px Arial\";\n      ctx.textAlign = \"center\";\n      const centerX = canvas.width / 2;\n      const centerY = canvas.height / 5;\n      \n      ctx.fillText(translations.gameOver, centerX, centerY);\n      ctx.font = \"20px Arial\";\n      ctx.fillText(`${translations.finalScore}: ${this.score}`, centerX, centerY + 20);\n      \n      // If it's a new high score and player is entering name\n      if (this.isEnteringName) {\n        ctx.fillText(translations.newHighScore, centerX, centerY + 100);\n        ctx.fillText(this.playerName + \"_\", centerX, centerY + 140);\n      } \n      // If name was entered or it's not a high score\n      else {\n        // Show high scores with even more spacing\n        ctx.font = \"24px Arial\";\n        const highScoresY = centerY + 80;\n        ctx.fillText(translations.highScores, centerX, highScoresY);\n        \n        ctx.font = \"16px Arial\";\n        if (this.highScores.length === 0) {\n          ctx.fillText(translations.noHighScores, centerX, highScoresY + 40);\n        } else {\n          // Only display up to 5 high scores\n          const displayScores = this.highScores.slice(0, 5);\n          displayScores.forEach((highScore, index) => {\n            ctx.fillText(`${index + 1}. ${highScore.name}: ${highScore.score} (${highScore.date})`, \n                         centerX, highScoresY + 40 + (index * 35));\n          });\n        }\n        \n        // Restart prompt at bottom with fixed position\n        ctx.fillStyle = \"#90EE90\";\n        ctx.font = \"18px Arial\";\n        ctx.fillText(translations.pressSpace, centerX, canvas.height - 20);\n      }\n    }\n  }\n}\n\nlet game = new Game();\n\ndocument.addEventListener('keydown', (e) => {\n  if (e.code === 'Space' && game.gameOver) {\n    game = new Game();\n  }\n});\n\nfunction gameLoop() {\n  game.update();\n  game.draw();\n  setTimeout(gameLoop, game.speed); // Use the current game speed\n}\n\nwindow.onload = () => {\n  initializeLanguage();\n  setupLanguageSwitcher();\n  gameLoop();\n  \n  // Check for existing high scores to show on initial load\n  game.updateHighScoresDisplay();\n};\n"],"names":["Direction","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$6qqMG","$0f592d681121713f$var$canvas","document","getElementById","$0f592d681121713f$var$ctx","getContext","$0f592d681121713f$var$currentLang","getDefaultLanguage","$0f592d681121713f$var$translations","languages","$0f592d681121713f$var$initializeLanguage","querySelectorAll","forEach","btn","langBtn","dataset","lang","classList","add","remove","title","el","key","getAttribute","textContent","$0f592d681121713f$var$Direction","$0f592d681121713f$var$Snake","constructor","body","x","y","direction","move","head","$0f592d681121713f$var$tileCount","unshift","grow","checkCollision","i","length","draw","segment","index","fillStyle","fillRect","$0f592d681121713f$var$gridSize","$0f592d681121713f$var$Food","randomize","Math","floor","random","$0f592d681121713f$var$BigFood","isActive","timer","points","size","activate","deactivate","update","deltaTime","font","textAlign","fillText","$0f592d681121713f$var$Game","snake","food","bigFood","score","gameOver","normalSpeed","fastSpeed","speed","longPressTimer","minSpeed","highScores","loadHighScores","isNewHighScore","playerName","isEnteringName","foodEatenCount","lastUpdateTime","Date","now","setupEventListeners","updateHighScoresDisplay","addEventListener","e","newDirection","window","setTimeout","includes","clearTimeout","saveHighScore","slice","preventDefault","currentTime","max","pop","checkHighScore","highScoresJson","localStorage","getItem","JSON","parse","saveHighScores","setItem","stringify","newScore","name","date","toLocaleDateString","push","sort","a","b","highScoresList","innerHTML","noScores","createElement","className","noScoresYet","appendChild","displayScores","entry","rankAndName","scoreElement","dateElement","drawHighScores","centerX","width","centerY","height","highScore","finalScore","newHighScore","highScoresY","noHighScores","pressSpace","secondsLeft","ceil","bigAppleTimer","$0f592d681121713f$var$game","onload","target","setLanguagePreference","$0f592d681121713f$var$gameLoop"],"version":3,"file":"hw2.2494ad2a.js.map"}